#!/bin/bash

# ensure /srv/pillar/auto_setup/ exists
# write pillar sls file with branch_tag and date_tag in it
# write new top.sls file containing it, 
# then everyone can get it from that sls file and pillar get

## helper functions

_timestamp() {
    date "+%Y-%m-%d %H:%M:%S:"
}

_log() {
    echo "$1" | sed "s/^/$(_timestamp) /" >>"${LOGGING}"
}

# Both echo and log
_display() {
    echo "$1"
    _log "$1" 
}

_error() {
    msg="ERROR: $1"
    echo "$msg" 1>&2
    echo "$(_timestamp) $msg" >>"${LOGGING}"
    echo "One or more errors found. See ${LOGGING} for details." 1>&2
    exit 1
}

_warning() {
    msg="WARNING: $1"
    echo "$msg" 1>&2
    echo "$(_timestamp) $msg" >>"${LOGGING}"
}


_usage() {
    echo ""
##    echo "usage: ${0}  [-h|--help] [-m|--minion <minion_to_use>] [ [-b|--branch <branch_to_build>] | [-t|--tag <tag>] ]"
    echo "usage: ${0}  [-h|--help] [-m|--minion <minion_to_use>] [-b|--branch <branch_to_build>]"
    echo ""
    echo "  -b, --branch    git HEAD of branch for specified major version, default 2016.11"
    echo "  -h, --help      this message"
    echo "  -m. --minion    salt-minion installed on salt-master node to use for code checkout, default 'm7m'"
    echo "  -v, --verbose   verbose output"
##    echo "  -t, --tag       build's tag, e.g. v2016.11.1  for specific release version"
##     echo "  -d, --debug     debug output enabled"
##    echo "  -l, --log       logging mode"
    echo ""
    echo "  creates specified packages for major platforms, signed with Salt testing keys"
    echo "  dated by current start time of execution in YYYYMMDDhhmm format"
    echo "  current platforms:"
    echo "      Redhat 7 and 6"
    echo "      Debian 8 and 7"
    echo "      Raspbian"
    echo "      Ubuntu 16.04 and 14.04"
    echo ""
    echo "  script expects node to contain salt-master with auto_setup installed and"
    echo "  salt-minion installed on salt-master node, id 'm7m'"
    echo ""
}


VERBOSE=0
DEBUG=false
USAGE_HELP=false
LOG_MODE='debug'
RELEASE_TAG=''
RELEASE_BRANCH='2016.11'

## minion resident on Salt-Master node
CODE_MINION='m7m'

##    -d | --debug )  DEBUG=true; shift ;;
##    -l | --log )  LOG_MODE="$2"; shift 2 ;;
##    -t | --tag ) RELEASE_TAG="$2"; shift 2 ;;

## not validating input branch tag, format v2016.11.1 or 2016.11
BRANCH_TAG=''

while true; do
  case "${1}" in
    -b | --branch ) RELEASE_BRANCH="$2"; shift 2 ;;
    -h | --help ) USAGE_HELP=true; shift ;;
    -m | --minion ) CODE_MINION="$2"; shift 2 ;;
    -v | --verbose ) VERBOSE=1; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

## check if want help, display usage and exit
[[ ${USAGE_HELP} = 'false' ]] || {
  _usage
  exit 0
}


## input version tag overrides use of branch if present
[[ -z "${RELEASE_TAG}" ]] && BRANCH_TAG="${RELEASE_BRANCH}" || BRANCH_TAG="${RELEASE_TAG}"

##  MAIN BODY OF SCRIPT

## date tag is YearMontDayHourMinuteSecondMicrosecond aka jid
date_long=$(date +%Y%m%d%H%M%S%N)
curr_date="${date_long::-2}"

CURRDIR=$(pwd)

PILLAR_DIR='/srv/pillar'
PILLAR_AUTO_SETUP_DIR="auto_setup"
PILLAR_AUTO_SETUP_TAG_ABSFILE="${PILLAR_DIR}/${PILLAR_AUTO_SETUP_DIR}/tag_build_date.jinja"

if [[ ! -d "${PILLAR_DIR}/${PILLAR_AUTO_SETUP_DIR}" ]]; then
    echo "Missing vital directory ${PILLAR_DIR}/${PILLAR_AUTO_SETUP_DIR}, ensure system is correctly setup before proceeding"
    exit 1
fi

cat <<@EOF > "${PILLAR_AUTO_SETUP_TAG_ABSFILE}"
{% set branch_tag = '${BRANCH_TAG}' %}
{% set date_tag = '${curr_date}' %}
@EOF


# set logging infomation
## want verbose while developing
LOGGING="/dev/null"

SCRIPTNAME=$(basename "$0")

## log_file_format="${CURRDIR}/$0-${curr_date}.log"
## log_file_format="/var/log/salt/$SCRIPTNAME-${curr_date}.log"
## log_file="`date \"+${log_file_format}\"`"
log_file="/var/log/salt/$SCRIPTNAME-${curr_date}.log"

if [[ ${VERBOSE} -ne 0 ]];then
    LOGGING="${log_file}"
else
    LOGGING="/dev/null"
fi


_display "$SCRIPTNAME: nightly build started"


salt ${CODE_MINION} saltutil.refresh_pillar || {
    _error "$SCRIPTNAME: refresh pillar for ${BRANCH_TAG}, retcode '${$?}'";
}

salt ${CODE_MINION} state.sls auto_setup || {
    _error "$SCRIPTNAME:state for auto_setup failed to function for ${BRANCH_TAG}, retcode '${$?}'";
}

_display "$SCRIPTNAME: nightly build checked out and modified salt from '${BRANCH_TAG} and about to build via orchstration"


_display "$SCRIPTNAME: nightly build via orchstration started for modified salt from '${BRANCH_TAG} on Redhat 7"
salt-run --async state.orchestrate auto_setup.orch.build_platform_rh7 || {
    _warning "$SCRIPTNAME:orch for build_platform_rh7 failed to build ${BRANCH_TAG}, retcode '${$?}'";
}
_display "$SCRIPTNAME: nightly build via orchstration finished for modified salt from '${BRANCH_TAG} on Redhat 7"


_display "$SCRIPTNAME: nightly build via orchstration started for modified salt from '${BRANCH_TAG} on Redhat 6"
salt-run --async state.orchestrate auto_setup.orch.build_platform_rh6 || {
    _warning "$SCRIPTNAME:orch for build_platform_rh7 failed to build ${BRANCH_TAG}, retcode '${$?}'";
}
_display "$SCRIPTNAME: nightly build via orchstration finished for modified salt from '${BRANCH_TAG} on Redhat 6"


_display "$SCRIPTNAME: nightly build via orchstration started for modified salt from '${BRANCH_TAG} on Debian 8"
salt-run --async state.orchestrate auto_setup.orch.build_platform_deb8 || {
    _warning "$SCRIPTNAME:orch for build_platform_deb8 failed to build ${BRANCH_TAG}, retcode '${$?}'";
}
_display "$SCRIPTNAME: nightly build via orchstration finished for modified salt from '${BRANCH_TAG} on Debian 8"


_display "$SCRIPTNAME: nightly build via orchstration started for modified salt from '${BRANCH_TAG} on Debian 7"
salt-run --async state.orchestrate auto_setup.orch.build_platform_deb7 || {
    _warning "$SCRIPTNAME:orch for build_platform_deb7 failed to build ${BRANCH_TAG}, retcode '${$?}'";
}
_display "$SCRIPTNAME: nightly build via orchstration finished for modified salt from '${BRANCH_TAG} on Debian 7"


_display "$SCRIPTNAME: nightly build via orchstration started for modified salt from '${BRANCH_TAG} on Ubuntu 16.04"
salt-run --async state.orchestrate auto_setup.orch.build_platform_ub1604 || {
    _warning "$SCRIPTNAME:orch for build_platform_ub1604 failed to build ${BRANCH_TAG}, retcode '${$?}'";
}
_display "$SCRIPTNAME: nightly build via orchstration finished for modified salt from '${BRANCH_TAG} on Ubuntu 16.04"


_display "$SCRIPTNAME: nightly build via orchstration started for modified salt from '${BRANCH_TAG} on Ubuntu 14.04"
salt-run --async state.orchestrate auto_setup.orch.build_platform_ub1404 || {
    _warning "$SCRIPTNAME:orch for build_platform_ub1404 failed to build ${BRANCH_TAG}, retcode '${$?}'";
}
_display "$SCRIPTNAME: nightly build via orchstration finished for modified salt from '${BRANCH_TAG} on Ubuntu 14.04"


_display "$SCRIPTNAME: nightly build finished"

